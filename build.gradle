buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        maven { url = 'https://maven.parchmentmc.org' }

    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${forgegradle_version}", changing: false
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.1.0'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath "org.parchmentmc:librarian:1.+"
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version "${cursegradle_version}"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'idea'

version = mod_version
group = "com.${author}.${modid}"
version = "${minecraft_version}-${mod_version}"
archivesBaseName = modid
// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    if (Boolean.parseBoolean(project.use_parchment)) {
        mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
    } else {
        mappings channel: 'official', version: "${minecraft_version}"
    }

    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "--debug", "--stacktrace", "--scan", "-mixin.config=${modid}.mixins.json".toString()
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('server')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "--debug", "--stacktrace", "--scan", "-mixin.config=${modid}.mixins.json".toString()
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args "--mod", modid, "--all", "--output", file('src/generated/resources/'), "--existing", file('src/main/resources/')

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


repositories {
    mavenLocal()
    maven { url "https://git.fosil.eu/api/packages/oier/maven" }

    maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // location of the maven for Curios API
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        url "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.ftb.mods"
        }
    }
    maven {
        url "https://maven.architectury.dev/"
        content {
            includeGroup "dev.architectury"
        }
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }




}

dependencies {
    implementation 'org.jetbrains:annotations:22.0.0'
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-forge:${jei_version}")

    implementation fg.deobf("com.simibubi.create:create-${create_minecraft_version}:${create_version}:slim") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")



    implementation fg.deobf("dev.latvian.mods:rhino-forge:${rhino_version}")
    implementation fg.deobf("dev.architectury:architectury-forge:${architectury_version}")
    implementation fg.deobf("dev.latvian.mods:kubejs-forge:${kubejs_version}")

    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}+${curios_minecraft_version}:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}+${curios_minecraft_version}")

    implementation fg.deobf("curse.maven:jade-324717:${jade_id}")


    jarJar(group: 'com.oierbravo.mechanical_lemon_ui', name: 'MechanicalLemonUI', version: "[${mechanical_lemon_ui_version},)") {
        jarJar.pin(it, "[${project.mechanical_lemon_ui_version},)")
    }
    implementation fg.deobf("com.oierbravo.mechanical_lemon_ui:MechanicalLemonUI:${mechanical_lemon_ui_version}")

    jarJar(group: 'com.oierbravo.mechanical_lemon_lib', name: 'MechanicalLemonLib', version: "[${mechanical_lemon_lib_version},)") {
        jarJar.pin(it, "[${project.mechanical_lemon_lib_version},)")
    }
    implementation fg.deobf("com.oierbravo.mechanical_lemon_lib:MechanicalLemonLib:${mechanical_lemon_lib_version}")


    implementation fg.deobf("com.oierbravo.trading_station:TradingStation:${trading_station_version}:slim") { transitive = false }
    //implementation fg.deobf("com.oierbravo.trading_station-trading-station:${trading_station_version}:slim") { transitive = false }

    //implementation "com.oierbravo.package:test_project:1.0.0"


    if (System.getProperty('idea.sync.active') != 'true') {
        annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    }

    //annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

}
// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : modid,
                "Specification-Vendor"    : author,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}
//mixin {
//    add sourceSets.main, "${modid}.refmap.json"
//}
/*task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier 'deobf'
}*/

//build.dependsOn deobfJar

jar.finalizedBy('reobfJar')

compileJava.options.encoding = 'UTF-8'
compileJava {
    options.compilerArgs = ['-Xdiags:verbose']
}
void addLicense(jarTask) {
    jarTask.from('LICENSE') {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
addLicense(jar)
